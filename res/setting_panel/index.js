// noinspection JSUnresolvedReference

const packsList = document.getElementById('packs-list');
const abbreviationsList = document.getElementById('abbreviations-list');
const autogeneratedAbbreviationsList = document.getElementById('autogenerated-abbreviations-list');

let currentPack = null;

window.addEventListener('pywebviewready', () => {
  loadPacks();
});

function appendPack(packName) {
  const packItem = document.createElement('a');
  packItem.classList.add('nav-link');
  packItem.href = '#';
  packItem.innerText = packName;
  packItem.addEventListener('click', () => {
    setPack(packName);
  });
  packsList.appendChild(packItem);
}

function loadPacks() {
  pywebview.api.get_packs().then(packs => {
    packs.forEach(pack => {
      // add pack to list
      appendPack(pack);

      // set current pack
      if (currentPack === null) {
        setPack(pack);
      }
    });
  });
}

function updateAbbreviations(packName) {
  abbreviationsList.innerHTML = '';
  autogeneratedAbbreviationsList.innerHTML = '';
  pywebview.api.get_pack_abbreviations(packName).then(abbreviations => {
    abbreviations.forEach((entry, _) => {
      const [key, [value, autogenerated]] = entry;
      let list = abbreviationsList;

      if (autogenerated) {
        list = autogeneratedAbbreviationsList;
      }

      appendAbbreviation(list, key, value);
    });
  });
}

function setPack(packName) {
  // update abbreviations list
  updateAbbreviations(packName);

  // update active pack
  packsList.querySelectorAll('a').forEach(a => {
    a.classList.remove('active');
    if (a.innerText === packName) {
      a.classList.add('active');
    }
  });
  currentPack = packName;
}

abbreviationsList.addEventListener('dblclick', e => {
  const row = e.target.closest('tr');
  if (row) {
    const abbreviation = row.querySelector('code').innerText;
    const meaning = row.querySelector('td:nth-child(2)').innerText;

    currentRow = row;
    currentAbbreviation = abbreviation;
    currentMeaning = meaning;

    const modal = new bootstrap.Modal(document.getElementById('change-abbreviation-modal'));
    makingNew = false;
    modal.show();
  }
});

const changeAbbreviationModal = document.getElementById('change-abbreviation-modal');
const abbreviationInput = changeAbbreviationModal.querySelector('input[name="abbreviation"]');
const meaningInput = changeAbbreviationModal.querySelector('input[name="meaning"]');
let currentRow = null;
let currentAbbreviation = null;
let currentMeaning = null;

changeAbbreviationModal.addEventListener('show.bs.modal', e => {
  abbreviationInput.value = currentAbbreviation;
  meaningInput.value = currentMeaning;
});

function appendAbbreviation(list, key, value) {
  const row = document.createElement('tr');

  const abbreviation = document.createElement('td');
  const codeblock = document.createElement('code');
  codeblock.innerText = key;
  abbreviation.appendChild(codeblock);
  row.appendChild(abbreviation);

  const meaning = document.createElement('td');
  meaning.innerText = value;
  row.appendChild(meaning);

  list.appendChild(row);
}

function updateAutogeneratedAbbreviations() {
  // update autogenerated abbreviations
  pywebview.api
    .get_autogenerated_abbreviations(currentPack)
    .then(abbreviations => {
      autogeneratedAbbreviationsList.innerHTML = '';
      abbreviations.forEach((entry, _) => {
        const [key, [value, autogenerated]] = entry;

        appendAbbreviation(autogeneratedAbbreviationsList, key, value);
      });
    });
}

let makingNew = false;

function applyMakeNew() {
  pywebview.api
    .check_new_available(currentPack, abbreviationInput.value)
    .then(good => {
      if (!good) {
        bootstrap.Toast.getOrCreateInstance(document.getElementById('invalid-toast')).show();
        return;
      }

      pywebview.api
        .new_abbreviation(currentPack, abbreviationInput.value, meaningInput.value)
        .then(() => updateAbbreviations(currentPack));
    });
}

function applyEdit() {
  pywebview.api
    .check_change_available(currentPack, currentAbbreviation, abbreviationInput.value)
    .then(good => {
      if (!good) {
        bootstrap.Toast.getOrCreateInstance(document.getElementById('invalid-toast')).show();
        return;
      }

      pywebview.api
        .edit_abbreviation(currentPack, currentAbbreviation, abbreviationInput.value, meaningInput.value)
        .then(() => {
          currentRow.querySelector('code').innerText = abbreviationInput.value;
          currentRow.querySelector('td:nth-child(2)').innerText = meaningInput.value;

          updateAutogeneratedAbbreviations();
        });
    });
}

function applyAbbreviationChange() {
  if (makingNew) {
    applyMakeNew();
  } else {
    applyEdit();
  }
}

function deleteThisAbbreviation() {
  pywebview.api.remove_abbreviation(currentPack, currentAbbreviation).then(() => {
    currentRow.remove();

    updateAutogeneratedAbbreviations();
  });
}

function newAbbreviation() {
  currentAbbreviation = '';
  currentMeaning = '';

  const modal = new bootstrap.Modal(document.getElementById('change-abbreviation-modal'));
  makingNew = true;
  modal.show();
}

const packNameInput = document.getElementById('pack-name');

function newPack() {
  packNameInput.value = '';

  const modal = new bootstrap.Modal(document.getElementById('new-pack-modal'));
  modal.show();
}

function applyNewPack() {
  let packName = packNameInput.value;

  if (!packName.endsWith('.json')) {
    packName += '.json';
  }

  pywebview.api.new_pack(packName).then(error => {
    if (error) {
      return;
    }

    appendPack(packName);
    setPack(packName);
  });
}

function removePack() {
  console.log(`This removes ${currentPack}`);
  pywebview.api.remove_pack(currentPack).then(() => {
    packsList.querySelectorAll('a').forEach(a => {
      if (a.innerText === currentPack) {
        a.remove();
      }
    });

    currentPack = packsList.querySelector('a').innerText;
    setPack(currentPack);
  });
}